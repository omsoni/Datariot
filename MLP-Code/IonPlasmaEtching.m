% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 13-Feb-2018 00:16:50
% Significantly Changed by Om Soni to process data, 
% configure the network and add K-fold
% cross validation

%cd /Users/omsoni/Documents/MS-DnA/IE7860/Assignments/MLP
x0 = readDataFile('IonPlasmaEtching-In.txt');
t0 = readDataFile('IonPlasmaEtching-Out.txt');

x1 = cell2mat(struct2cell(x0))
t1 = cell2mat(struct2cell(t0))


x = reshape(x1(:,2:7), 6,53);
t = reshape(t1, 4,53);
%  Choose a Training Function
%  For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Scaled conjugate gradient backpropagation.

% Create a Fitting Network
hiddenLayerSize = 15;
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error
net.trainParam.lr = 0.5;

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

net.trainParam.epochs = 30;
net.trainParam.max_fail = 500;
net.trainParam.min_grad = 0.000000000000001;
c = cvpartition(53,'LeaveOut')
trainIdxs = cell(1, 53);
testIdxs = cell(1, 53);
validMatrix = zeros(53,6);
trainMatrix = zeros(53,6);
perfs = zeros(1, 53);
for i=1:53
    trainIdxs{i} = find(training(c,i));
    testIdxs{i}  = find(test(c,i));
    [net,tr] = train(net,x(:,trainIdxs{i}),t(:, trainIdxs{i}));
    y2 = net(x(:,testIdxs{i},:));
    perfs(i) = mse(net, t, y2);
end
